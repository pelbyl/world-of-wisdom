// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: metrics.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countDifficultyAdjustments = `-- name: CountDifficultyAdjustments :one
SELECT COUNT(*) as adjustment_count
FROM metrics 
WHERE metric_name = 'difficulty_adjustment'
  AND time >= NOW() - INTERVAL '1 hour'
`

func (q *Queries) CountDifficultyAdjustments(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRow(ctx, countDifficultyAdjustments)
	var adjustment_count int64
	err := row.Scan(&adjustment_count)
	return adjustment_count, err
}

const getMetricHistory = `-- name: GetMetricHistory :many
SELECT 
    time_bucket('1 minute', time) AS bucket,
    metric_name,
    AVG(metric_value) as avg_value,
    MIN(metric_value) as min_value,
    MAX(metric_value) as max_value,
    COUNT(*) as sample_count
FROM metrics 
WHERE metric_name = $1 
  AND time >= NOW() - INTERVAL '1 hour'
GROUP BY bucket, metric_name
ORDER BY bucket DESC
`

type GetMetricHistoryRow struct {
	Bucket      interface{} `json:"bucket"`
	MetricName  string      `json:"metric_name"`
	AvgValue    float64     `json:"avg_value"`
	MinValue    interface{} `json:"min_value"`
	MaxValue    interface{} `json:"max_value"`
	SampleCount int64       `json:"sample_count"`
}

func (q *Queries) GetMetricHistory(ctx context.Context, db DBTX, metricName string) ([]GetMetricHistoryRow, error) {
	rows, err := db.Query(ctx, getMetricHistory, metricName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMetricHistoryRow{}
	for rows.Next() {
		var i GetMetricHistoryRow
		if err := rows.Scan(
			&i.Bucket,
			&i.MetricName,
			&i.AvgValue,
			&i.MinValue,
			&i.MaxValue,
			&i.SampleCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMetricsByName = `-- name: GetMetricsByName :many
SELECT time, metric_name, metric_value, labels, server_instance FROM metrics 
WHERE metric_name = $1 
  AND time >= NOW() - INTERVAL '1 hour'
ORDER BY time DESC
LIMIT $2
`

type GetMetricsByNameParams struct {
	MetricName string `json:"metric_name"`
	Limit      int32  `json:"limit"`
}

func (q *Queries) GetMetricsByName(ctx context.Context, db DBTX, arg GetMetricsByNameParams) ([]Metric, error) {
	rows, err := db.Query(ctx, getMetricsByName, arg.MetricName, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Metric{}
	for rows.Next() {
		var i Metric
		if err := rows.Scan(
			&i.Time,
			&i.MetricName,
			&i.MetricValue,
			&i.Labels,
			&i.ServerInstance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentMetrics = `-- name: GetRecentMetrics :many
SELECT DISTINCT ON (metric_name) 
    metric_name, metric_value, labels, time
FROM metrics 
WHERE time >= NOW() - INTERVAL '1 hour'
ORDER BY metric_name, time DESC
`

type GetRecentMetricsRow struct {
	MetricName  string             `json:"metric_name"`
	MetricValue float64            `json:"metric_value"`
	Labels      []byte             `json:"labels"`
	Time        pgtype.Timestamptz `json:"time"`
}

func (q *Queries) GetRecentMetrics(ctx context.Context, db DBTX) ([]GetRecentMetricsRow, error) {
	rows, err := db.Query(ctx, getRecentMetrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRecentMetricsRow{}
	for rows.Next() {
		var i GetRecentMetricsRow
		if err := rows.Scan(
			&i.MetricName,
			&i.MetricValue,
			&i.Labels,
			&i.Time,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemMetrics = `-- name: GetSystemMetrics :many
SELECT 
    metric_name,
    metric_value,
    labels,
    time
FROM metrics 
WHERE metric_name IN ('current_difficulty', 'active_connections', 'total_challenges', 'hash_rate')
  AND time >= NOW() - INTERVAL '5 minutes'
ORDER BY metric_name, time DESC
`

type GetSystemMetricsRow struct {
	MetricName  string             `json:"metric_name"`
	MetricValue float64            `json:"metric_value"`
	Labels      []byte             `json:"labels"`
	Time        pgtype.Timestamptz `json:"time"`
}

func (q *Queries) GetSystemMetrics(ctx context.Context, db DBTX) ([]GetSystemMetricsRow, error) {
	rows, err := db.Query(ctx, getSystemMetrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSystemMetricsRow{}
	for rows.Next() {
		var i GetSystemMetricsRow
		if err := rows.Scan(
			&i.MetricName,
			&i.MetricValue,
			&i.Labels,
			&i.Time,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordMetric = `-- name: RecordMetric :exec
INSERT INTO metrics (metric_name, metric_value, labels, server_instance)
VALUES ($1, $2, $3, $4)
`

type RecordMetricParams struct {
	MetricName     string      `json:"metric_name"`
	MetricValue    float64     `json:"metric_value"`
	Labels         []byte      `json:"labels"`
	ServerInstance pgtype.Text `json:"server_instance"`
}

func (q *Queries) RecordMetric(ctx context.Context, db DBTX, arg RecordMetricParams) error {
	_, err := db.Exec(ctx, recordMetric,
		arg.MetricName,
		arg.MetricValue,
		arg.Labels,
		arg.ServerInstance,
	)
	return err
}
