# Load Testing Configuration
# Usage: docker-compose -f docker-compose.yml -f docker-compose.test.yml up --scale client-load=10

services:
  # Load testing client that connects repeatedly
  client-load:
    build:
      context: .
      dockerfile: Dockerfile.client
    depends_on:
      server:
        condition: service_started
    environment:
      - SERVER_HOST=server
      - SERVER_PORT=8080
      - ALGORITHM=argon2
      - DIFFICULTY=2
      - CONNECT_INTERVAL=5s
      - MAX_CONNECTIONS=100
      - TEST_DURATION=300s
    networks:
      - wisdom-net
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    command: >
      sh -c '
        echo "Starting load test client $$HOSTNAME...";
        while true; do
          echo "Connecting to $$SERVER_HOST:$$SERVER_PORT with $$ALGORITHM";
          /app/client -server $$SERVER_HOST:$$SERVER_PORT -algorithm $$ALGORITHM -difficulty $$DIFFICULTY || true;
          echo "Connection completed, waiting $$CONNECT_INTERVAL...";
          sleep $${CONNECT_INTERVAL:-5};
        done
      '

  # Burst testing client for stress testing
  client-burst:
    build:
      context: .
      dockerfile: Dockerfile.client
    depends_on:
      server:
        condition: service_started
    environment:
      - SERVER_HOST=server
      - SERVER_PORT=8080
      - ALGORITHM=sha256
      - DIFFICULTY=1
      - BURST_SIZE=50
      - BURST_INTERVAL=30s
    networks:
      - wisdom-net
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    command: >
      sh -c '
        echo "Starting burst test client $$HOSTNAME...";
        while true; do
          echo "Starting burst of $$BURST_SIZE connections...";
          for i in $$(seq 1 $$BURST_SIZE); do
            timeout 30 /app/client -server $$SERVER_HOST:$$SERVER_PORT -algorithm $$ALGORITHM -difficulty $$DIFFICULTY &
          done;
          wait;
          echo "Burst completed, waiting $$BURST_INTERVAL...";
          sleep $${BURST_INTERVAL:-30};
        done
      '

  # Mixed algorithm testing client
  client-mixed:
    build:
      context: .
      dockerfile: Dockerfile.client
    depends_on:
      server:
        condition: service_started
    environment:
      - SERVER_HOST=server
      - SERVER_PORT=8080
      - ALGORITHMS=sha256,argon2
      - DIFFICULTIES=1,2,3
      - CONNECT_INTERVAL=10s
    networks:
      - wisdom-net
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    command: >
      sh -c '
        echo "Starting mixed algorithm test client $$HOSTNAME...";
        algorithms=(sha256 argon2);
        difficulties=(1 2 3);
        while true; do
          alg=$${algorithms[$$((RANDOM % $${#algorithms[@]}])]};
          diff=$${difficulties[$$((RANDOM % $${#difficulties[@]}])]};
          echo "Testing with algorithm=$$alg, difficulty=$$diff";
          timeout 60 /app/client -server $$SERVER_HOST:$$SERVER_PORT -algorithm $$alg -difficulty $$diff || true;
          sleep $${CONNECT_INTERVAL:-10};
        done
      '

  # Long-running connection test
  client-endurance:
    build:
      context: .
      dockerfile: Dockerfile.client
    depends_on:
      server:
        condition: service_started
    environment:
      - SERVER_HOST=server
      - SERVER_PORT=8080
      - ALGORITHM=argon2
      - DIFFICULTY=3
      - CONNECTION_DURATION=600s
      - RESTART_INTERVAL=900s
    networks:
      - wisdom-net
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    command: >
      sh -c '
        echo "Starting endurance test client $$HOSTNAME...";
        while true; do
          echo "Starting long-running connection ($$CONNECTION_DURATION)...";
          timeout $$CONNECTION_DURATION /app/client -server $$SERVER_HOST:$$SERVER_PORT -algorithm $$ALGORITHM -difficulty $$DIFFICULTY || true;
          echo "Connection ended, restarting in $$RESTART_INTERVAL...";
          sleep $${RESTART_INTERVAL:-900};
        done
      '

  # Metrics collector for test results
  test-monitor:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus-test.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=1h'
      - '--web.enable-lifecycle'
    networks:
      - wisdom-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Grafana for test visualization
  test-dashboard:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./config/grafana-test.json:/var/lib/grafana/dashboards/test-dashboard.json
      - ./config/grafana-dashboard-config.yml:/etc/grafana/provisioning/dashboards/default.yml
      - ./config/grafana-datasource.yml:/etc/grafana/provisioning/datasources/default.yml
    networks:
      - wisdom-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

volumes:
  prometheus-test-data:
    driver: local
  grafana-test-data:
    driver: local