// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/yourusername/world-of-wisdom",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/challenges": {
            "get": {
                "description": "Get a list of recent challenges with optional limit",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "challenges"
                ],
                "summary": "Get recent challenges",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit number of results (default: 50, max: 1000)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of challenges",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new PoW challenge with specified parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "challenges"
                ],
                "summary": "Create a new challenge",
                "parameters": [
                    {
                        "description": "Challenge data",
                        "name": "challenge",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiserver.CreateChallengeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Challenge created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/challenges/{id}": {
            "get": {
                "description": "Get a specific challenge by its UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "challenges"
                ],
                "summary": "Get challenge by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Challenge UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Challenge details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid challenge ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Challenge not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/solutions": {
            "get": {
                "description": "Get a list of recent solutions with optional limit",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "solutions"
                ],
                "summary": "Get recent solutions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit number of results (default: 50, max: 1000)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of solutions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new solution for a challenge",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "solutions"
                ],
                "summary": "Create a new solution",
                "parameters": [
                    {
                        "description": "Solution data",
                        "name": "solution",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiserver.CreateSolutionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Solution created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apiserver.CreateChallengeRequest": {
            "type": "object",
            "required": [
                "algorithm",
                "clientId",
                "difficulty",
                "seed"
            ],
            "properties": {
                "algorithm": {
                    "type": "string",
                    "enum": [
                        "sha256",
                        "argon2"
                    ]
                },
                "argon2KeyLen": {
                    "type": "integer"
                },
                "argon2Memory": {
                    "type": "integer"
                },
                "argon2Threads": {
                    "type": "integer"
                },
                "argon2Time": {
                    "type": "integer"
                },
                "clientId": {
                    "type": "string"
                },
                "difficulty": {
                    "type": "integer",
                    "maximum": 6,
                    "minimum": 1
                },
                "seed": {
                    "type": "string"
                }
            }
        },
        "apiserver.CreateSolutionRequest": {
            "type": "object",
            "required": [
                "attempts",
                "challengeId",
                "hash",
                "nonce",
                "solveTimeMs"
            ],
            "properties": {
                "attempts": {
                    "type": "integer",
                    "minimum": 1
                },
                "challengeId": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "nonce": {
                    "type": "string"
                },
                "solveTimeMs": {
                    "type": "integer",
                    "minimum": 0
                },
                "verified": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8082",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "Word of Wisdom REST API",
	Description:      "REST API for Word of Wisdom PoW server with type-safe database operations",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
