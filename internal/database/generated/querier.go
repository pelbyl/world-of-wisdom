// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	CalculateAndUpdateClientDifficulty(ctx context.Context, db DBTX, ipAddress netip.Addr) (pgtype.Int4, error)
	CountDifficultyAdjustments(ctx context.Context, db DBTX) (int64, error)
	CountLogsByLevel(ctx context.Context, db DBTX) ([]CountLogsByLevelRow, error)
	CreateChallenge(ctx context.Context, db DBTX, arg CreateChallengeParams) (Challenge, error)
	CreateClientBehavior(ctx context.Context, db DBTX, ipAddress netip.Addr) (ClientBehavior, error)
	CreateConnection(ctx context.Context, db DBTX, arg CreateConnectionParams) (Connection, error)
	CreateConnectionTimestamp(ctx context.Context, db DBTX, ipAddress netip.Addr) (ConnectionTimestamp, error)
	CreateHMACKey(ctx context.Context, db DBTX, arg CreateHMACKeyParams) (HmacKey, error)
	CreateLog(ctx context.Context, db DBTX, arg CreateLogParams) (Log, error)
	CreateSolution(ctx context.Context, db DBTX, arg CreateSolutionParams) (Solution, error)
	DeactivateHMACKeys(ctx context.Context, db DBTX) error
	DeleteOldLogs(ctx context.Context, db DBTX) error
	GetActiveClients(ctx context.Context, db DBTX, limit int32) ([]GetActiveClientsRow, error)
	GetActiveConnections(ctx context.Context, db DBTX) ([]Connection, error)
	GetActiveHMACKey(ctx context.Context, db DBTX) (HmacKey, error)
	// Get aggregated metrics with configurable time bucket
	GetAggregatedMetrics(ctx context.Context, db DBTX, arg GetAggregatedMetricsParams) ([]GetAggregatedMetricsRow, error)
	GetChallenge(ctx context.Context, db DBTX, id pgtype.UUID) (Challenge, error)
	GetChallengeByClientID(ctx context.Context, db DBTX, clientID string) (Challenge, error)
	// Get distribution of challenges by difficulty and algorithm
	GetChallengeDistribution(ctx context.Context, db DBTX) ([]GetChallengeDistributionRow, error)
	// Get aggregated challenge statistics for the API
	GetChallengeStats(ctx context.Context, db DBTX) (GetChallengeStatsRow, error)
	GetChallengesByAlgorithm(ctx context.Context, db DBTX, algorithm PowAlgorithm) ([]Challenge, error)
	GetChallengesByDifficulty(ctx context.Context, db DBTX, difficulty int32) ([]Challenge, error)
	// Get challenges with multiple filter options for API endpoint
	GetChallengesFiltered(ctx context.Context, db DBTX, arg GetChallengesFilteredParams) ([]GetChallengesFilteredRow, error)
	GetClientBehaviorByIP(ctx context.Context, db DBTX, ipAddress netip.Addr) (ClientBehavior, error)
	GetClientBehaviorStats(ctx context.Context, db DBTX, limit int32) ([]GetClientBehaviorStatsRow, error)
	// Get statistics per client ID
	GetClientStats(ctx context.Context, db DBTX) ([]GetClientStatsRow, error)
	GetConnection(ctx context.Context, db DBTX, id pgtype.UUID) (Connection, error)
	GetConnectionByClientID(ctx context.Context, db DBTX, clientID string) (Connection, error)
	GetConnectionStats(ctx context.Context, db DBTX) (GetConnectionStatsRow, error)
	// Get connections with optional status filter for API endpoint
	GetConnectionsFiltered(ctx context.Context, db DBTX, status ConnectionStatus) ([]Connection, error)
	GetHMACKeyByVersion(ctx context.Context, db DBTX, keyVersion int32) (HmacKey, error)
	// Get historical hash rate data for charts (using solutions table)
	GetHashRateHistory(ctx context.Context, db DBTX) ([]GetHashRateHistoryRow, error)
	GetLatestHMACKeys(ctx context.Context, db DBTX, limit int32) ([]HmacKey, error)
	GetLogsByLevel(ctx context.Context, db DBTX, arg GetLogsByLevelParams) ([]Log, error)
	GetLogsInTimeRange(ctx context.Context, db DBTX, arg GetLogsInTimeRangeParams) ([]Log, error)
	GetLogsPaginated(ctx context.Context, db DBTX, arg GetLogsPaginatedParams) ([]Log, error)
	GetMetricHistory(ctx context.Context, db DBTX, metricName string) ([]GetMetricHistoryRow, error)
	GetMetricsByName(ctx context.Context, db DBTX, arg GetMetricsByNameParams) ([]Metric, error)
	// Get metrics within a specific time range with optional metric name filter
	GetMetricsByTimeRange(ctx context.Context, db DBTX, arg GetMetricsByTimeRangeParams) ([]GetMetricsByTimeRangeRow, error)
	// Get metrics aggregated by time bucket (simplified for clean architecture)
	GetMetricsFromContinuousAggregate(ctx context.Context, db DBTX, arg GetMetricsFromContinuousAggregateParams) ([]GetMetricsFromContinuousAggregateRow, error)
	GetRecentChallenges(ctx context.Context, db DBTX, limit int32) ([]Challenge, error)
	GetRecentConnections(ctx context.Context, db DBTX, limit int32) ([]Connection, error)
	GetRecentLogs(ctx context.Context, db DBTX, limit int32) ([]Log, error)
	GetRecentMetrics(ctx context.Context, db DBTX) ([]GetRecentMetricsRow, error)
	GetRecentSolutions(ctx context.Context, db DBTX, limit int32) ([]GetRecentSolutionsRow, error)
	GetSolution(ctx context.Context, db DBTX, id pgtype.UUID) (Solution, error)
	GetSolutionStats(ctx context.Context, db DBTX) (GetSolutionStatsRow, error)
	GetSolutionsByChallenge(ctx context.Context, db DBTX, challengeID pgtype.UUID) ([]Solution, error)
	GetSystemMetrics(ctx context.Context, db DBTX) ([]GetSystemMetricsRow, error)
	GetTopAggressiveClients(ctx context.Context, db DBTX, limit int32) ([]GetTopAggressiveClientsRow, error)
	RecordMetric(ctx context.Context, db DBTX, arg RecordMetricParams) error
	UpdateChallengeStatus(ctx context.Context, db DBTX, arg UpdateChallengeStatusParams) (Challenge, error)
	UpdateClientBehavior(ctx context.Context, db DBTX, ipAddress netip.Addr) (ClientBehavior, error)
	UpdateClientChallengeStats(ctx context.Context, db DBTX, arg UpdateClientChallengeStatsParams) error
	UpdateClientDifficulty(ctx context.Context, db DBTX, arg UpdateClientDifficultyParams) error
	UpdateClientReconnectRate(ctx context.Context, db DBTX, ipAddress netip.Addr) error
	UpdateClientReputation(ctx context.Context, db DBTX, arg UpdateClientReputationParams) error
	UpdateConnectionStats(ctx context.Context, db DBTX, arg UpdateConnectionStatsParams) (Connection, error)
	UpdateConnectionStatus(ctx context.Context, db DBTX, arg UpdateConnectionStatusParams) (Connection, error)
	UpdateConnectionTimestamp(ctx context.Context, db DBTX, arg UpdateConnectionTimestampParams) error
	UpdateSuspiciousActivityScore(ctx context.Context, db DBTX, ipAddress netip.Addr) error
	VerifySolution(ctx context.Context, db DBTX, arg VerifySolutionParams) (Solution, error)
}

var _ Querier = (*Queries)(nil)
