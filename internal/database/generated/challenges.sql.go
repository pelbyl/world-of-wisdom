// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: challenges.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChallenge = `-- name: CreateChallenge :one
INSERT INTO challenges (
    seed, difficulty, algorithm, client_id, status,
    argon2_time, argon2_memory, argon2_threads, argon2_keylen
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, seed, difficulty, algorithm, client_id, status, created_at, solved_at, expires_at, argon2_time, argon2_memory, argon2_threads, argon2_keylen
`

type CreateChallengeParams struct {
	Seed          string          `json:"seed"`
	Difficulty    int32           `json:"difficulty"`
	Algorithm     PowAlgorithm    `json:"algorithm"`
	ClientID      string          `json:"client_id"`
	Status        ChallengeStatus `json:"status"`
	Argon2Time    pgtype.Int4     `json:"argon2_time"`
	Argon2Memory  pgtype.Int4     `json:"argon2_memory"`
	Argon2Threads pgtype.Int2     `json:"argon2_threads"`
	Argon2Keylen  pgtype.Int4     `json:"argon2_keylen"`
}

func (q *Queries) CreateChallenge(ctx context.Context, db DBTX, arg CreateChallengeParams) (Challenge, error) {
	row := db.QueryRow(ctx, createChallenge,
		arg.Seed,
		arg.Difficulty,
		arg.Algorithm,
		arg.ClientID,
		arg.Status,
		arg.Argon2Time,
		arg.Argon2Memory,
		arg.Argon2Threads,
		arg.Argon2Keylen,
	)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Seed,
		&i.Difficulty,
		&i.Algorithm,
		&i.ClientID,
		&i.Status,
		&i.CreatedAt,
		&i.SolvedAt,
		&i.ExpiresAt,
		&i.Argon2Time,
		&i.Argon2Memory,
		&i.Argon2Threads,
		&i.Argon2Keylen,
	)
	return i, err
}

const getChallenge = `-- name: GetChallenge :one
SELECT id, seed, difficulty, algorithm, client_id, status, created_at, solved_at, expires_at, argon2_time, argon2_memory, argon2_threads, argon2_keylen FROM challenges WHERE id = $1
`

func (q *Queries) GetChallenge(ctx context.Context, db DBTX, id pgtype.UUID) (Challenge, error) {
	row := db.QueryRow(ctx, getChallenge, id)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Seed,
		&i.Difficulty,
		&i.Algorithm,
		&i.ClientID,
		&i.Status,
		&i.CreatedAt,
		&i.SolvedAt,
		&i.ExpiresAt,
		&i.Argon2Time,
		&i.Argon2Memory,
		&i.Argon2Threads,
		&i.Argon2Keylen,
	)
	return i, err
}

const getChallengeByClientID = `-- name: GetChallengeByClientID :one
SELECT id, seed, difficulty, algorithm, client_id, status, created_at, solved_at, expires_at, argon2_time, argon2_memory, argon2_threads, argon2_keylen FROM challenges 
WHERE client_id = $1 AND status = 'pending'
ORDER BY created_at DESC 
LIMIT 1
`

func (q *Queries) GetChallengeByClientID(ctx context.Context, db DBTX, clientID string) (Challenge, error) {
	row := db.QueryRow(ctx, getChallengeByClientID, clientID)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Seed,
		&i.Difficulty,
		&i.Algorithm,
		&i.ClientID,
		&i.Status,
		&i.CreatedAt,
		&i.SolvedAt,
		&i.ExpiresAt,
		&i.Argon2Time,
		&i.Argon2Memory,
		&i.Argon2Threads,
		&i.Argon2Keylen,
	)
	return i, err
}

const getChallengesByAlgorithm = `-- name: GetChallengesByAlgorithm :many
SELECT id, seed, difficulty, algorithm, client_id, status, created_at, solved_at, expires_at, argon2_time, argon2_memory, argon2_threads, argon2_keylen FROM challenges 
WHERE algorithm = $1 AND created_at >= NOW() - INTERVAL '24 hours'
ORDER BY created_at DESC
`

func (q *Queries) GetChallengesByAlgorithm(ctx context.Context, db DBTX, algorithm PowAlgorithm) ([]Challenge, error) {
	rows, err := db.Query(ctx, getChallengesByAlgorithm, algorithm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Challenge{}
	for rows.Next() {
		var i Challenge
		if err := rows.Scan(
			&i.ID,
			&i.Seed,
			&i.Difficulty,
			&i.Algorithm,
			&i.ClientID,
			&i.Status,
			&i.CreatedAt,
			&i.SolvedAt,
			&i.ExpiresAt,
			&i.Argon2Time,
			&i.Argon2Memory,
			&i.Argon2Threads,
			&i.Argon2Keylen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChallengesByDifficulty = `-- name: GetChallengesByDifficulty :many
SELECT id, seed, difficulty, algorithm, client_id, status, created_at, solved_at, expires_at, argon2_time, argon2_memory, argon2_threads, argon2_keylen FROM challenges 
WHERE difficulty = $1 AND created_at >= NOW() - INTERVAL '24 hours'
ORDER BY created_at DESC
`

func (q *Queries) GetChallengesByDifficulty(ctx context.Context, db DBTX, difficulty int32) ([]Challenge, error) {
	rows, err := db.Query(ctx, getChallengesByDifficulty, difficulty)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Challenge{}
	for rows.Next() {
		var i Challenge
		if err := rows.Scan(
			&i.ID,
			&i.Seed,
			&i.Difficulty,
			&i.Algorithm,
			&i.ClientID,
			&i.Status,
			&i.CreatedAt,
			&i.SolvedAt,
			&i.ExpiresAt,
			&i.Argon2Time,
			&i.Argon2Memory,
			&i.Argon2Threads,
			&i.Argon2Keylen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChallengesFiltered = `-- name: GetChallengesFiltered :many
SELECT 
    c.id,
    c.seed,
    c.difficulty,
    c.algorithm,
    c.client_id,
    c.status,
    c.created_at,
    c.solved_at,
    c.expires_at,
    CASE 
        WHEN c.status = 'completed' AND c.solved_at IS NOT NULL 
        THEN EXTRACT(EPOCH FROM (c.solved_at - c.created_at)) * 1000 
        ELSE NULL 
    END::BIGINT as solve_time_ms
FROM challenges c
WHERE 
    ($1::challenge_status IS NULL OR c.status = $1)
    AND ($2::pow_algorithm IS NULL OR c.algorithm = $2)
    AND c.created_at >= NOW() - INTERVAL '24 hours'
ORDER BY c.created_at DESC
LIMIT $3
`

type GetChallengesFilteredParams struct {
	Status     ChallengeStatus `json:"status"`
	Algorithm  PowAlgorithm    `json:"algorithm"`
	LimitCount int32           `json:"limit_count"`
}

type GetChallengesFilteredRow struct {
	ID          pgtype.UUID        `json:"id"`
	Seed        string             `json:"seed"`
	Difficulty  int32              `json:"difficulty"`
	Algorithm   PowAlgorithm       `json:"algorithm"`
	ClientID    string             `json:"client_id"`
	Status      ChallengeStatus    `json:"status"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	SolvedAt    pgtype.Timestamptz `json:"solved_at"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
	SolveTimeMs int64              `json:"solve_time_ms"`
}

// Get challenges with multiple filter options for API endpoint
func (q *Queries) GetChallengesFiltered(ctx context.Context, db DBTX, arg GetChallengesFilteredParams) ([]GetChallengesFilteredRow, error) {
	rows, err := db.Query(ctx, getChallengesFiltered, arg.Status, arg.Algorithm, arg.LimitCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChallengesFilteredRow{}
	for rows.Next() {
		var i GetChallengesFilteredRow
		if err := rows.Scan(
			&i.ID,
			&i.Seed,
			&i.Difficulty,
			&i.Algorithm,
			&i.ClientID,
			&i.Status,
			&i.CreatedAt,
			&i.SolvedAt,
			&i.ExpiresAt,
			&i.SolveTimeMs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentChallenges = `-- name: GetRecentChallenges :many
SELECT id, seed, difficulty, algorithm, client_id, status, created_at, solved_at, expires_at, argon2_time, argon2_memory, argon2_threads, argon2_keylen FROM challenges 
WHERE created_at >= NOW() - INTERVAL '1 hour'
ORDER BY created_at DESC
LIMIT $1
`

func (q *Queries) GetRecentChallenges(ctx context.Context, db DBTX, limit int32) ([]Challenge, error) {
	rows, err := db.Query(ctx, getRecentChallenges, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Challenge{}
	for rows.Next() {
		var i Challenge
		if err := rows.Scan(
			&i.ID,
			&i.Seed,
			&i.Difficulty,
			&i.Algorithm,
			&i.ClientID,
			&i.Status,
			&i.CreatedAt,
			&i.SolvedAt,
			&i.ExpiresAt,
			&i.Argon2Time,
			&i.Argon2Memory,
			&i.Argon2Threads,
			&i.Argon2Keylen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChallengeStatus = `-- name: UpdateChallengeStatus :one
UPDATE challenges 
SET status = $1::challenge_status, solved_at = CASE WHEN $1::challenge_status = 'completed' THEN NOW() ELSE solved_at END
WHERE id = $2 
RETURNING id, seed, difficulty, algorithm, client_id, status, created_at, solved_at, expires_at, argon2_time, argon2_memory, argon2_threads, argon2_keylen
`

type UpdateChallengeStatusParams struct {
	Status ChallengeStatus `json:"status"`
	ID     pgtype.UUID     `json:"id"`
}

func (q *Queries) UpdateChallengeStatus(ctx context.Context, db DBTX, arg UpdateChallengeStatusParams) (Challenge, error) {
	row := db.QueryRow(ctx, updateChallengeStatus, arg.Status, arg.ID)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Seed,
		&i.Difficulty,
		&i.Algorithm,
		&i.ClientID,
		&i.Status,
		&i.CreatedAt,
		&i.SolvedAt,
		&i.ExpiresAt,
		&i.Argon2Time,
		&i.Argon2Memory,
		&i.Argon2Threads,
		&i.Argon2Keylen,
	)
	return i, err
}
