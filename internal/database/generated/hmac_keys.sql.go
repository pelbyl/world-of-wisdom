// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: hmac_keys.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHMACKey = `-- name: CreateHMACKey :one
INSERT INTO hmac_keys (
    key_version,
    encrypted_key,
    previous_encrypted_key,
    metadata
) VALUES (
    $1, $2, $3, $4
) RETURNING id, key_version, encrypted_key, previous_encrypted_key, created_at, rotated_at, is_active, metadata
`

type CreateHMACKeyParams struct {
	KeyVersion           int32       `json:"key_version"`
	EncryptedKey         string      `json:"encrypted_key"`
	PreviousEncryptedKey pgtype.Text `json:"previous_encrypted_key"`
	Metadata             []byte      `json:"metadata"`
}

func (q *Queries) CreateHMACKey(ctx context.Context, db DBTX, arg CreateHMACKeyParams) (HmacKey, error) {
	row := db.QueryRow(ctx, createHMACKey,
		arg.KeyVersion,
		arg.EncryptedKey,
		arg.PreviousEncryptedKey,
		arg.Metadata,
	)
	var i HmacKey
	err := row.Scan(
		&i.ID,
		&i.KeyVersion,
		&i.EncryptedKey,
		&i.PreviousEncryptedKey,
		&i.CreatedAt,
		&i.RotatedAt,
		&i.IsActive,
		&i.Metadata,
	)
	return i, err
}

const deactivateHMACKeys = `-- name: DeactivateHMACKeys :exec
UPDATE hmac_keys
SET is_active = false
WHERE is_active = true
`

func (q *Queries) DeactivateHMACKeys(ctx context.Context, db DBTX) error {
	_, err := db.Exec(ctx, deactivateHMACKeys)
	return err
}

const getActiveHMACKey = `-- name: GetActiveHMACKey :one
SELECT id, key_version, encrypted_key, previous_encrypted_key, created_at, rotated_at, is_active, metadata FROM hmac_keys
WHERE is_active = true
LIMIT 1
`

func (q *Queries) GetActiveHMACKey(ctx context.Context, db DBTX) (HmacKey, error) {
	row := db.QueryRow(ctx, getActiveHMACKey)
	var i HmacKey
	err := row.Scan(
		&i.ID,
		&i.KeyVersion,
		&i.EncryptedKey,
		&i.PreviousEncryptedKey,
		&i.CreatedAt,
		&i.RotatedAt,
		&i.IsActive,
		&i.Metadata,
	)
	return i, err
}

const getHMACKeyByVersion = `-- name: GetHMACKeyByVersion :one
SELECT id, key_version, encrypted_key, previous_encrypted_key, created_at, rotated_at, is_active, metadata FROM hmac_keys
WHERE key_version = $1
LIMIT 1
`

func (q *Queries) GetHMACKeyByVersion(ctx context.Context, db DBTX, keyVersion int32) (HmacKey, error) {
	row := db.QueryRow(ctx, getHMACKeyByVersion, keyVersion)
	var i HmacKey
	err := row.Scan(
		&i.ID,
		&i.KeyVersion,
		&i.EncryptedKey,
		&i.PreviousEncryptedKey,
		&i.CreatedAt,
		&i.RotatedAt,
		&i.IsActive,
		&i.Metadata,
	)
	return i, err
}

const getLatestHMACKeys = `-- name: GetLatestHMACKeys :many
SELECT id, key_version, encrypted_key, previous_encrypted_key, created_at, rotated_at, is_active, metadata FROM hmac_keys
ORDER BY created_at DESC
LIMIT $1
`

func (q *Queries) GetLatestHMACKeys(ctx context.Context, db DBTX, limit int32) ([]HmacKey, error) {
	rows, err := db.Query(ctx, getLatestHMACKeys, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HmacKey{}
	for rows.Next() {
		var i HmacKey
		if err := rows.Scan(
			&i.ID,
			&i.KeyVersion,
			&i.EncryptedKey,
			&i.PreviousEncryptedKey,
			&i.CreatedAt,
			&i.RotatedAt,
			&i.IsActive,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
