// Package apiserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package apiserver

import (
	"time"
)

// Defines values for APIResponseStatus.
const (
	APIResponseStatusError   APIResponseStatus = "error"
	APIResponseStatusSuccess APIResponseStatus = "success"
)

// Defines values for ChallengeStatus.
const (
	ChallengeStatusCompleted ChallengeStatus = "completed"
	ChallengeStatusFailed    ChallengeStatus = "failed"
	ChallengeStatusSolving   ChallengeStatus = "solving"
)

// Defines values for ChallengeDetailAlgorithm.
const (
	ChallengeDetailAlgorithmArgon2 ChallengeDetailAlgorithm = "argon2"
	ChallengeDetailAlgorithmSha256 ChallengeDetailAlgorithm = "sha256"
)

// Defines values for ChallengeDetailStatus.
const (
	ChallengeDetailStatusCompleted ChallengeDetailStatus = "completed"
	ChallengeDetailStatusExpired   ChallengeDetailStatus = "expired"
	ChallengeDetailStatusFailed    ChallengeDetailStatus = "failed"
	ChallengeDetailStatusPending   ChallengeDetailStatus = "pending"
	ChallengeDetailStatusSolving   ChallengeDetailStatus = "solving"
)

// Defines values for ChallengesResponseStatus.
const (
	ChallengesResponseStatusError   ChallengesResponseStatus = "error"
	ChallengesResponseStatusSuccess ChallengesResponseStatus = "success"
)

// Defines values for ConnectionDetailAlgorithm.
const (
	ConnectionDetailAlgorithmArgon2 ConnectionDetailAlgorithm = "argon2"
	ConnectionDetailAlgorithmSha256 ConnectionDetailAlgorithm = "sha256"
)

// Defines values for ConnectionDetailStatus.
const (
	ConnectionDetailStatusConnected    ConnectionDetailStatus = "connected"
	ConnectionDetailStatusDisconnected ConnectionDetailStatus = "disconnected"
	ConnectionDetailStatusFailed       ConnectionDetailStatus = "failed"
	ConnectionDetailStatusSolving      ConnectionDetailStatus = "solving"
)

// Defines values for ConnectionsResponseStatus.
const (
	ConnectionsResponseStatusError   ConnectionsResponseStatus = "error"
	ConnectionsResponseStatusSuccess ConnectionsResponseStatus = "success"
)

// Defines values for HealthDataAlgorithm.
const (
	HealthDataAlgorithmArgon2 HealthDataAlgorithm = "argon2"
	HealthDataAlgorithmSha256 HealthDataAlgorithm = "sha256"
)

// Defines values for HealthDataStatus.
const (
	Degraded  HealthDataStatus = "degraded"
	Healthy   HealthDataStatus = "healthy"
	Unhealthy HealthDataStatus = "unhealthy"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusError   HealthResponseStatus = "error"
	HealthResponseStatusSuccess HealthResponseStatus = "success"
)

// Defines values for LogMessageLevel.
const (
	LogMessageLevelError   LogMessageLevel = "error"
	LogMessageLevelInfo    LogMessageLevel = "info"
	LogMessageLevelSuccess LogMessageLevel = "success"
	LogMessageLevelWarning LogMessageLevel = "warning"
)

// Defines values for LogsResponseStatus.
const (
	LogsResponseStatusError   LogsResponseStatus = "error"
	LogsResponseStatusSuccess LogsResponseStatus = "success"
)

// Defines values for MetricsResponseStatus.
const (
	MetricsResponseStatusError   MetricsResponseStatus = "error"
	MetricsResponseStatusSuccess MetricsResponseStatus = "success"
)

// Defines values for RecentSolvesResponseStatus.
const (
	RecentSolvesResponseStatusError   RecentSolvesResponseStatus = "error"
	RecentSolvesResponseStatusSuccess RecentSolvesResponseStatus = "success"
)

// Defines values for StatsResponseStatus.
const (
	Error   StatsResponseStatus = "error"
	Success StatsResponseStatus = "success"
)

// Defines values for GetChallengesParamsStatus.
const (
	GetChallengesParamsStatusCompleted GetChallengesParamsStatus = "completed"
	GetChallengesParamsStatusExpired   GetChallengesParamsStatus = "expired"
	GetChallengesParamsStatusFailed    GetChallengesParamsStatus = "failed"
	GetChallengesParamsStatusPending   GetChallengesParamsStatus = "pending"
	GetChallengesParamsStatusSolving   GetChallengesParamsStatus = "solving"
)

// Defines values for GetChallengesParamsAlgorithm.
const (
	GetChallengesParamsAlgorithmArgon2 GetChallengesParamsAlgorithm = "argon2"
	GetChallengesParamsAlgorithmSha256 GetChallengesParamsAlgorithm = "sha256"
)

// Defines values for GetConnectionsParamsStatus.
const (
	Connected    GetConnectionsParamsStatus = "connected"
	Disconnected GetConnectionsParamsStatus = "disconnected"
	Failed       GetConnectionsParamsStatus = "failed"
	Solving      GetConnectionsParamsStatus = "solving"
)

// Defines values for GetMetricsParamsInterval.
const (
	N15m GetMetricsParamsInterval = "15m"
	N1h  GetMetricsParamsInterval = "1h"
	N1m  GetMetricsParamsInterval = "1m"
	N5m  GetMetricsParamsInterval = "5m"
)

// APIResponse defines model for APIResponse.
type APIResponse struct {
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
	Status  APIResponseStatus       `json:"status"`
}

// APIResponseStatus defines model for APIResponse.Status.
type APIResponseStatus string

// Block defines model for Block.
type Block struct {
	Challenge    *Challenge `json:"challenge,omitempty"`
	Hash         *string    `json:"hash,omitempty"`
	Index        *int       `json:"index,omitempty"`
	PreviousHash *string    `json:"previousHash,omitempty"`
	Quote        *string    `json:"quote,omitempty"`
	Solution     *Solution  `json:"solution,omitempty"`
	Timestamp    *int64     `json:"timestamp,omitempty"`
}

// Challenge defines model for Challenge.
type Challenge struct {
	ClientId   *string          `json:"clientId,omitempty"`
	Difficulty *int             `json:"difficulty,omitempty"`
	Id         *string          `json:"id,omitempty"`
	Seed       *string          `json:"seed,omitempty"`
	Status     *ChallengeStatus `json:"status,omitempty"`
	Timestamp  *int64           `json:"timestamp,omitempty"`
}

// ChallengeStatus defines model for Challenge.Status.
type ChallengeStatus string

// ChallengeDetail defines model for ChallengeDetail.
type ChallengeDetail struct {
	Algorithm   *ChallengeDetailAlgorithm `json:"algorithm,omitempty"`
	ClientId    *string                   `json:"clientId,omitempty"`
	CreatedAt   *time.Time                `json:"createdAt,omitempty"`
	Difficulty  *int                      `json:"difficulty,omitempty"`
	ExpiresAt   *time.Time                `json:"expiresAt,omitempty"`
	Id          *string                   `json:"id,omitempty"`
	Seed        *string                   `json:"seed,omitempty"`
	SolveTimeMs *int                      `json:"solveTimeMs"`
	SolvedAt    *time.Time                `json:"solvedAt"`
	Status      *ChallengeDetailStatus    `json:"status,omitempty"`
}

// ChallengeDetailAlgorithm defines model for ChallengeDetail.Algorithm.
type ChallengeDetailAlgorithm string

// ChallengeDetailStatus defines model for ChallengeDetail.Status.
type ChallengeDetailStatus string

// ChallengeStats defines model for ChallengeStats.
type ChallengeStats struct {
	Active *int `json:"active,omitempty"`
}

// ChallengesResponse defines model for ChallengesResponse.
type ChallengesResponse struct {
	Data *struct {
		Challenges *[]ChallengeDetail `json:"challenges,omitempty"`
		Total      *int               `json:"total,omitempty"`
	} `json:"data,omitempty"`
	Message *string                  `json:"message,omitempty"`
	Status  ChallengesResponseStatus `json:"status"`
}

// ChallengesResponseStatus defines model for ChallengesResponse.Status.
type ChallengesResponseStatus string

// ConnectionDetail defines model for ConnectionDetail.
type ConnectionDetail struct {
	Algorithm           *ConnectionDetailAlgorithm `json:"algorithm,omitempty"`
	ChallengesAttempted *int                       `json:"challengesAttempted,omitempty"`
	ChallengesCompleted *int                       `json:"challengesCompleted,omitempty"`
	ClientId            *string                    `json:"clientId,omitempty"`
	ConnectedAt         *time.Time                 `json:"connectedAt,omitempty"`
	DisconnectedAt      *time.Time                 `json:"disconnectedAt"`
	Id                  *string                    `json:"id,omitempty"`
	RemoteAddr          *string                    `json:"remoteAddr,omitempty"`
	Status              *ConnectionDetailStatus    `json:"status,omitempty"`
	TotalSolveTimeMs    *int                       `json:"totalSolveTimeMs,omitempty"`
}

// ConnectionDetailAlgorithm defines model for ConnectionDetail.Algorithm.
type ConnectionDetailAlgorithm string

// ConnectionDetailStatus defines model for ConnectionDetail.Status.
type ConnectionDetailStatus string

// ConnectionStats defines model for ConnectionStats.
type ConnectionStats struct {
	Active *int `json:"active,omitempty"`
	Total  *int `json:"total,omitempty"`
}

// ConnectionsResponse defines model for ConnectionsResponse.
type ConnectionsResponse struct {
	Data *struct {
		Active      *int                `json:"active,omitempty"`
		Connections *[]ConnectionDetail `json:"connections,omitempty"`
		Total       *int                `json:"total,omitempty"`
	} `json:"data,omitempty"`
	Message *string                   `json:"message,omitempty"`
	Status  ConnectionsResponseStatus `json:"status"`
}

// ConnectionsResponseStatus defines model for ConnectionsResponse.Status.
type ConnectionsResponseStatus string

// HealthData defines model for HealthData.
type HealthData struct {
	ActiveChallenges *int                 `json:"activeChallenges,omitempty"`
	Algorithm        *HealthDataAlgorithm `json:"algorithm,omitempty"`
	Difficulty       *int                 `json:"difficulty,omitempty"`
	LiveConnections  *int                 `json:"liveConnections,omitempty"`
	MiningActive     *bool                `json:"miningActive,omitempty"`
	Status           *HealthDataStatus    `json:"status,omitempty"`
	TotalBlocks      *int                 `json:"totalBlocks,omitempty"`
}

// HealthDataAlgorithm defines model for HealthData.Algorithm.
type HealthDataAlgorithm string

// HealthDataStatus defines model for HealthData.Status.
type HealthDataStatus string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Data    *HealthData          `json:"data,omitempty"`
	Message *string              `json:"message,omitempty"`
	Status  HealthResponseStatus `json:"status"`
}

// HealthResponseStatus defines model for HealthResponse.Status.
type HealthResponseStatus string

// LogMessage defines model for LogMessage.
type LogMessage struct {
	Icon      *string          `json:"icon,omitempty"`
	Level     *LogMessageLevel `json:"level,omitempty"`
	Message   *string          `json:"message,omitempty"`
	Timestamp *int64           `json:"timestamp,omitempty"`
}

// LogMessageLevel defines model for LogMessage.Level.
type LogMessageLevel string

// LogsResponse defines model for LogsResponse.
type LogsResponse struct {
	Data    *[]LogMessage      `json:"data,omitempty"`
	Message *string            `json:"message,omitempty"`
	Status  LogsResponseStatus `json:"status"`
}

// LogsResponseStatus defines model for LogsResponse.Status.
type LogsResponseStatus string

// MetricData defines model for MetricData.
type MetricData struct {
	AvgValue   *float32                `json:"avgValue,omitempty"`
	Labels     *map[string]interface{} `json:"labels,omitempty"`
	MaxValue   *float32                `json:"maxValue,omitempty"`
	MetricName *string                 `json:"metricName,omitempty"`
	MinValue   *float32                `json:"minValue,omitempty"`
	Time       *time.Time              `json:"time,omitempty"`
	Value      *float32                `json:"value,omitempty"`
}

// MetricsResponse defines model for MetricsResponse.
type MetricsResponse struct {
	Data *struct {
		Metrics *[]MetricData `json:"metrics,omitempty"`
	} `json:"data,omitempty"`
	Message *string               `json:"message,omitempty"`
	Status  MetricsResponseStatus `json:"status"`
}

// MetricsResponseStatus defines model for MetricsResponse.Status.
type MetricsResponseStatus string

// MiningStats defines model for MiningStats.
type MiningStats struct {
	AverageSolveTime    *float32 `json:"averageSolveTime,omitempty"`
	CompletedChallenges *int     `json:"completedChallenges,omitempty"`
	CurrentDifficulty   *int     `json:"currentDifficulty,omitempty"`
	HashRate            *float32 `json:"hashRate,omitempty"`
	TotalChallenges     *int     `json:"totalChallenges,omitempty"`
}

// RecentSolvesResponse defines model for RecentSolvesResponse.
type RecentSolvesResponse struct {
	Data    *[]Block                   `json:"data,omitempty"`
	Message *string                    `json:"message,omitempty"`
	Status  RecentSolvesResponseStatus `json:"status"`
}

// RecentSolvesResponseStatus defines model for RecentSolvesResponse.Status.
type RecentSolvesResponseStatus string

// Solution defines model for Solution.
type Solution struct {
	Attempts    *int    `json:"attempts,omitempty"`
	ChallengeId *string `json:"challengeId,omitempty"`
	Hash        *string `json:"hash,omitempty"`
	Nonce       *string `json:"nonce,omitempty"`
	TimeToSolve *int64  `json:"timeToSolve,omitempty"`
	Timestamp   *int64  `json:"timestamp,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	Challenges   *ChallengeStats  `json:"challenges,omitempty"`
	Connections  *ConnectionStats `json:"connections,omitempty"`
	MiningActive *bool            `json:"miningActive,omitempty"`
	Stats        *MiningStats     `json:"stats,omitempty"`
	System       *SystemStats     `json:"system,omitempty"`
}

// StatsResponse defines model for StatsResponse.
type StatsResponse struct {
	Data    *StatsData          `json:"data,omitempty"`
	Message *string             `json:"message,omitempty"`
	Status  StatsResponseStatus `json:"status"`
}

// StatsResponseStatus defines model for StatsResponse.Status.
type StatsResponseStatus string

// SystemStats defines model for SystemStats.
type SystemStats struct {
	ActiveMiners *int    `json:"activeMiners,omitempty"`
	Algorithm    *string `json:"algorithm,omitempty"`
	Intensity    *int    `json:"intensity,omitempty"`
}

// GetChallengesParams defines parameters for GetChallenges.
type GetChallengesParams struct {
	// Limit Maximum number of challenges to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Status Filter by challenge status
	Status *GetChallengesParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Algorithm Filter by algorithm
	Algorithm *GetChallengesParamsAlgorithm `form:"algorithm,omitempty" json:"algorithm,omitempty"`
}

// GetChallengesParamsStatus defines parameters for GetChallenges.
type GetChallengesParamsStatus string

// GetChallengesParamsAlgorithm defines parameters for GetChallenges.
type GetChallengesParamsAlgorithm string

// GetConnectionsParams defines parameters for GetConnections.
type GetConnectionsParams struct {
	// Status Filter by connection status
	Status *GetConnectionsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetConnectionsParamsStatus defines parameters for GetConnections.
type GetConnectionsParamsStatus string

// GetLogsParams defines parameters for GetLogs.
type GetLogsParams struct {
	// Limit Maximum number of logs to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetMetricsParams defines parameters for GetMetrics.
type GetMetricsParams struct {
	// Metric Specific metric name to retrieve
	Metric *string `form:"metric,omitempty" json:"metric,omitempty"`

	// Interval Time interval for aggregation
	Interval *GetMetricsParamsInterval `form:"interval,omitempty" json:"interval,omitempty"`

	// Start Start timestamp (ISO 8601 or Unix timestamp)
	Start *string `form:"start,omitempty" json:"start,omitempty"`

	// End End timestamp (ISO 8601 or Unix timestamp)
	End *string `form:"end,omitempty" json:"end,omitempty"`
}

// GetMetricsParamsInterval defines parameters for GetMetrics.
type GetMetricsParamsInterval string
