'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var recharts = require('recharts');
var core = require('@mantine/core');
var ChartTooltip = require('../ChartTooltip/ChartTooltip.cjs');
var FunnelChart_module = require('./FunnelChart.module.css.cjs');

const defaultProps = {
  withTooltip: true,
  size: 300,
  strokeWidth: 1,
  withLabels: false,
  labelsPosition: "right",
  tooltipDataSource: "all"
};
const varsResolver = core.createVarsResolver(
  (theme, { strokeColor, labelColor, size }) => ({
    root: {
      "--chart-stroke-color": strokeColor ? core.getThemeColor(strokeColor, theme) : void 0,
      "--chart-labels-color": labelColor ? core.getThemeColor(labelColor, theme) : void 0,
      "--chart-size": core.rem(size)
    }
  })
);
const FunnelChart = core.factory((_props, ref) => {
  const props = core.useProps("FunnelChart", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    data,
    withTooltip,
    tooltipAnimationDuration,
    tooltipProps,
    strokeWidth,
    withLabels,
    size,
    valueFormatter,
    children,
    funnelChartProps,
    funnelProps,
    labelsPosition,
    tooltipDataSource,
    ...others
  } = props;
  const theme = core.useMantineTheme();
  const getStyles = core.useStyles({
    name: "FunnelChart",
    classes: FunnelChart_module,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver
  });
  const { resolvedClassNames, resolvedStyles } = core.useResolvedStylesApi({
    classNames,
    styles,
    props
  });
  return /* @__PURE__ */ jsxRuntime.jsx(core.Box, { ref, size, ...getStyles("root"), ...others, children: /* @__PURE__ */ jsxRuntime.jsx(recharts.ResponsiveContainer, { children: /* @__PURE__ */ jsxRuntime.jsxs(recharts.FunnelChart, { ...funnelChartProps, children: [
    /* @__PURE__ */ jsxRuntime.jsxs(
      recharts.Funnel,
      {
        data,
        dataKey: "value",
        isAnimationActive: false,
        stroke: "var(--chart-stroke-color, var(--mantine-color-body))",
        strokeWidth,
        ...funnelProps,
        children: [
          withLabels && /* @__PURE__ */ jsxRuntime.jsx(
            recharts.LabelList,
            {
              position: labelsPosition,
              fill: labelsPosition === "inside" ? "var(--chart-labels-color, var(--mantine-color-white))" : "var(--chart-labels-color, var(--mantine-color-dimmed))",
              stroke: "none",
              fontFamily: "var(--mantine-font-family)",
              fontSize: 14,
              dataKey: (entry) => {
                return typeof valueFormatter === "function" ? valueFormatter(entry.value) : entry.value;
              }
            }
          ),
          data.map((entry, index) => /* @__PURE__ */ jsxRuntime.jsx(
            recharts.Cell,
            {
              fill: core.getThemeColor(entry.color, theme),
              stroke: "var(--chart-stroke-color, var(--mantine-color-body))",
              strokeWidth
            },
            index
          ))
        ]
      }
    ),
    withTooltip && /* @__PURE__ */ jsxRuntime.jsx(
      recharts.Tooltip,
      {
        animationDuration: tooltipAnimationDuration,
        isAnimationActive: false,
        content: ({ payload }) => /* @__PURE__ */ jsxRuntime.jsx(
          ChartTooltip.ChartTooltip,
          {
            payload: data,
            classNames: resolvedClassNames,
            styles: resolvedStyles,
            type: "radial",
            segmentId: tooltipDataSource === "segment" ? payload?.[0]?.name : void 0,
            valueFormatter
          }
        ),
        ...tooltipProps
      }
    ),
    children
  ] }) }) });
});
FunnelChart.displayName = "@mantine/charts/FunnelChart";
FunnelChart.classes = FunnelChart_module;

exports.FunnelChart = FunnelChart;
//# sourceMappingURL=FunnelChart.cjs.map
