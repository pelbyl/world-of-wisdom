'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var recharts = require('recharts');
var core = require('@mantine/core');
var ChartLegend = require('../ChartLegend/ChartLegend.cjs');
var ChartTooltip = require('../ChartTooltip/ChartTooltip.cjs');
var PointLabel = require('../PointLabel/PointLabel.cjs');
var gridChart_module = require('../grid-chart.module.css.cjs');

const defaultProps = {
  withXAxis: true,
  withYAxis: true,
  withTooltip: true,
  tooltipAnimationDuration: 0,
  tickLine: "y",
  strokeDasharray: "5 5",
  gridAxis: "x",
  withDots: true,
  connectNulls: true,
  strokeWidth: 2,
  curveType: "monotone"
};
const varsResolver = core.createVarsResolver(
  (theme, { textColor, gridColor }) => ({
    root: {
      "--chart-text-color": textColor ? core.getThemeColor(textColor, theme) : void 0,
      "--chart-grid-color": gridColor ? core.getThemeColor(gridColor, theme) : void 0
    }
  })
);
const CompositeChart = core.factory((_props, ref) => {
  const props = core.useProps("CompositeChart", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    data,
    withLegend,
    legendProps,
    series,
    onMouseLeave,
    dataKey,
    withTooltip,
    withXAxis,
    withYAxis,
    gridAxis,
    tickLine,
    xAxisProps,
    yAxisProps,
    unit,
    tooltipAnimationDuration,
    strokeDasharray,
    gridProps,
    tooltipProps,
    referenceLines,
    withDots,
    dotProps,
    activeDotProps,
    strokeWidth,
    connectNulls,
    curveType,
    dir,
    valueFormatter,
    children,
    lineProps,
    xAxisLabel,
    yAxisLabel,
    withRightYAxis,
    rightYAxisLabel,
    rightYAxisProps,
    withPointLabels,
    areaProps,
    barProps,
    withBarValueLabel,
    minBarSize,
    maxBarWidth,
    composedChartProps,
    ...others
  } = props;
  const theme = core.useMantineTheme();
  const withXTickLine = gridAxis !== "none" && (tickLine === "x" || tickLine === "xy");
  const withYTickLine = gridAxis !== "none" && (tickLine === "y" || tickLine === "xy");
  const [highlightedArea, setHighlightedArea] = react.useState(null);
  const shouldHighlight = highlightedArea !== null;
  const handleMouseLeave = (event) => {
    setHighlightedArea(null);
    onMouseLeave?.(event);
  };
  const { resolvedClassNames, resolvedStyles } = core.useResolvedStylesApi({
    classNames,
    styles,
    props
  });
  const getStyles = core.useStyles({
    name: "CompositeChart",
    classes: gridChart_module,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver
  });
  const lines = series.map((item) => {
    const color = core.getThemeColor(item.color, theme);
    const dimmed = shouldHighlight && highlightedArea !== item.name;
    if (item.type === "line") {
      return /* @__PURE__ */ react.createElement(
        recharts.Line,
        {
          ...getStyles("line"),
          key: item.name,
          name: item.name,
          dataKey: item.name,
          dot: withDots ? {
            fillOpacity: dimmed ? 0 : 1,
            strokeOpacity: dimmed ? 0 : 1,
            strokeWidth: 1,
            fill: color,
            stroke: color,
            ...dotProps
          } : false,
          activeDot: withDots ? { fill: "var(--mantine-color-white)", stroke: color, ...activeDotProps } : false,
          fill: color,
          stroke: color,
          strokeWidth,
          isAnimationActive: false,
          fillOpacity: dimmed ? 0 : 1,
          strokeOpacity: dimmed ? 0.5 : 1,
          connectNulls,
          type: curveType,
          strokeDasharray: item.strokeDasharray,
          yAxisId: item.yAxisId || "left",
          label: withPointLabels ? /* @__PURE__ */ jsxRuntime.jsx(PointLabel.PointLabel, { valueFormatter }) : void 0,
          ...typeof lineProps === "function" ? lineProps(item) : lineProps
        }
      );
    }
    if (item.type === "area") {
      return /* @__PURE__ */ react.createElement(
        recharts.Area,
        {
          ...getStyles("area"),
          key: item.name,
          name: item.name,
          type: curveType,
          dataKey: item.name,
          fill: color,
          strokeWidth,
          stroke: color,
          isAnimationActive: false,
          connectNulls,
          dot: withDots ? {
            fillOpacity: dimmed ? 0 : 1,
            strokeOpacity: dimmed ? 0 : 1,
            strokeWidth: 1,
            fill: color,
            stroke: color,
            ...dotProps
          } : false,
          activeDot: withDots ? {
            fill: theme.white,
            stroke: color,
            strokeWidth: 2,
            r: 4,
            ...activeDotProps
          } : false,
          fillOpacity: dimmed ? 0 : 0.2,
          strokeOpacity: dimmed ? 0.5 : 1,
          strokeDasharray: item.strokeDasharray,
          yAxisId: item.yAxisId || "left",
          label: withPointLabels ? /* @__PURE__ */ jsxRuntime.jsx(PointLabel.PointLabel, { valueFormatter }) : void 0,
          ...typeof areaProps === "function" ? areaProps(item) : areaProps
        }
      );
    }
    if (item.type === "bar") {
      return /* @__PURE__ */ react.createElement(
        recharts.Bar,
        {
          ...getStyles("bar"),
          key: item.name,
          name: item.name,
          dataKey: item.name,
          fill: color,
          stroke: color,
          isAnimationActive: false,
          fillOpacity: dimmed ? 0.1 : 1,
          strokeOpacity: dimmed ? 0.2 : 0,
          yAxisId: item.yAxisId || "left",
          minPointSize: minBarSize,
          ...typeof barProps === "function" ? barProps(item) : barProps
        },
        withBarValueLabel && /* @__PURE__ */ jsxRuntime.jsx(
          recharts.LabelList,
          {
            position: "top",
            fontSize: 12,
            fill: "var(--chart-bar-label-color, var(--mantine-color-dimmed))",
            formatter: valueFormatter
          }
        )
      );
    }
    return null;
  });
  const referenceLinesItems = referenceLines?.map((line, index) => {
    const color = core.getThemeColor(line.color, theme);
    return /* @__PURE__ */ jsxRuntime.jsx(
      recharts.ReferenceLine,
      {
        stroke: line.color ? color : "var(--chart-grid-color)",
        strokeWidth: 1,
        yAxisId: line.yAxisId || "left",
        ...line,
        label: {
          value: line.label,
          fill: line.color ? color : "currentColor",
          fontSize: 12,
          position: line.labelPosition ?? "insideBottomLeft"
        },
        ...getStyles("referenceLine")
      },
      index
    );
  });
  const sharedYAxisProps = {
    axisLine: false,
    type: "number",
    tickLine: withYTickLine ? { stroke: "currentColor" } : false,
    allowDecimals: true,
    unit,
    tickFormatter: valueFormatter,
    ...getStyles("axis")
  };
  return /* @__PURE__ */ jsxRuntime.jsx(
    core.Box,
    {
      ref,
      ...getStyles("root"),
      onMouseLeave: handleMouseLeave,
      dir: dir || "ltr",
      ...others,
      children: /* @__PURE__ */ jsxRuntime.jsx(recharts.ResponsiveContainer, { ...getStyles("container"), children: /* @__PURE__ */ jsxRuntime.jsxs(
        recharts.ComposedChart,
        {
          data,
          maxBarSize: maxBarWidth,
          margin: {
            bottom: xAxisLabel ? 30 : void 0,
            left: yAxisLabel ? 10 : void 0,
            right: yAxisLabel ? 5 : void 0
          },
          ...composedChartProps,
          children: [
            withLegend && /* @__PURE__ */ jsxRuntime.jsx(
              recharts.Legend,
              {
                verticalAlign: "top",
                content: (payload) => /* @__PURE__ */ jsxRuntime.jsx(
                  ChartLegend.ChartLegend,
                  {
                    payload: payload.payload,
                    onHighlight: setHighlightedArea,
                    legendPosition: legendProps?.verticalAlign || "top",
                    classNames: resolvedClassNames,
                    styles: resolvedStyles,
                    series
                  }
                ),
                ...legendProps
              }
            ),
            /* @__PURE__ */ jsxRuntime.jsxs(
              recharts.XAxis,
              {
                hide: !withXAxis,
                dataKey,
                tick: { transform: "translate(0, 10)", fontSize: 12, fill: "currentColor" },
                stroke: "",
                interval: "preserveStartEnd",
                tickLine: withXTickLine ? { stroke: "currentColor" } : false,
                minTickGap: 5,
                ...getStyles("axis"),
                ...xAxisProps,
                children: [
                  xAxisLabel && /* @__PURE__ */ jsxRuntime.jsx(recharts.Label, { position: "insideBottom", offset: -20, fontSize: 12, ...getStyles("axisLabel"), children: xAxisLabel }),
                  xAxisProps?.children
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntime.jsxs(
              recharts.YAxis,
              {
                yAxisId: "left",
                orientation: "left",
                tick: { transform: "translate(-10, 0)", fontSize: 12, fill: "currentColor" },
                hide: !withYAxis,
                ...sharedYAxisProps,
                ...yAxisProps,
                children: [
                  yAxisLabel && /* @__PURE__ */ jsxRuntime.jsx(
                    recharts.Label,
                    {
                      position: "insideLeft",
                      angle: -90,
                      textAnchor: "middle",
                      fontSize: 12,
                      offset: -5,
                      ...getStyles("axisLabel"),
                      children: yAxisLabel
                    }
                  ),
                  yAxisProps?.children
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntime.jsxs(
              recharts.YAxis,
              {
                yAxisId: "right",
                orientation: "right",
                tick: { transform: "translate(10, 0)", fontSize: 12, fill: "currentColor" },
                hide: !withRightYAxis,
                ...sharedYAxisProps,
                ...rightYAxisProps,
                children: [
                  rightYAxisLabel && /* @__PURE__ */ jsxRuntime.jsx(
                    recharts.Label,
                    {
                      position: "insideRight",
                      angle: 90,
                      textAnchor: "middle",
                      fontSize: 12,
                      offset: -5,
                      ...getStyles("axisLabel"),
                      children: rightYAxisLabel
                    }
                  ),
                  yAxisProps?.children
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntime.jsx(
              recharts.CartesianGrid,
              {
                strokeDasharray,
                vertical: gridAxis === "y" || gridAxis === "xy",
                horizontal: gridAxis === "x" || gridAxis === "xy",
                ...getStyles("grid"),
                ...gridProps
              }
            ),
            withTooltip && /* @__PURE__ */ jsxRuntime.jsx(
              recharts.Tooltip,
              {
                animationDuration: tooltipAnimationDuration,
                isAnimationActive: tooltipAnimationDuration !== 0,
                position: { y: 0 },
                cursor: {
                  stroke: "var(--chart-grid-color)",
                  strokeWidth: 1,
                  strokeDasharray
                },
                content: ({ label, payload }) => /* @__PURE__ */ jsxRuntime.jsx(
                  ChartTooltip.ChartTooltip,
                  {
                    label,
                    payload,
                    unit,
                    classNames: resolvedClassNames,
                    styles: resolvedStyles,
                    series,
                    valueFormatter
                  }
                ),
                ...tooltipProps
              }
            ),
            lines,
            referenceLinesItems,
            children
          ]
        }
      ) })
    }
  );
});
CompositeChart.displayName = "@mantine/charts/CompositeChart";
CompositeChart.classes = gridChart_module;

exports.CompositeChart = CompositeChart;
//# sourceMappingURL=CompositeChart.cjs.map
