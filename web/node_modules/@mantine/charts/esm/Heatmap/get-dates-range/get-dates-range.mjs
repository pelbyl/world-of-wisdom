'use client';
function formatDate(date) {
  return date.toISOString().split("T")[0];
}
function addDays(date, days) {
  return new Date(date.getTime() + days * 864e5);
}
function startOfWeek(date, firstDayOfWeek) {
  let value = new Date(date);
  while (value.getDay() !== firstDayOfWeek) {
    value = addDays(value, -1);
  }
  return value;
}
function endOfWeek(date, firstDayOfWeek) {
  const day = date.getDay();
  const diff = (day < firstDayOfWeek ? 7 : 0) + day - firstDayOfWeek;
  return addDays(date, 6 - diff);
}
function getDatesRange({
  startDate,
  endDate,
  withOutsideDates = true,
  firstDayOfWeek = 1
} = {}) {
  const start = startDate ? new Date(startDate) : new Date((/* @__PURE__ */ new Date()).getFullYear() - 1, (/* @__PURE__ */ new Date()).getMonth(), (/* @__PURE__ */ new Date()).getDate());
  const end = endDate ? new Date(endDate) : /* @__PURE__ */ new Date();
  const startWeek = startOfWeek(start, firstDayOfWeek);
  const endWeek = endOfWeek(end, firstDayOfWeek);
  const dates = [];
  let current = startWeek;
  while (current <= endWeek) {
    const week = Array.from({ length: 7 }, (_, i) => {
      const day = addDays(current, i);
      return withOutsideDates || day >= start && day <= end ? formatDate(day) : null;
    });
    dates.push(week);
    current = addDays(current, 7);
  }
  return dates;
}

export { getDatesRange };
//# sourceMappingURL=get-dates-range.mjs.map
