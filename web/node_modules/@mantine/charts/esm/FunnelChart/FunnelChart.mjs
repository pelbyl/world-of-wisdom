'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import { ResponsiveContainer, FunnelChart as FunnelChart$1, Funnel, LabelList, Cell, Tooltip } from 'recharts';
import { createVarsResolver, getThemeColor, rem, factory, useProps, useMantineTheme, useStyles, useResolvedStylesApi, Box } from '@mantine/core';
import { ChartTooltip } from '../ChartTooltip/ChartTooltip.mjs';
import classes from './FunnelChart.module.css.mjs';

const defaultProps = {
  withTooltip: true,
  size: 300,
  strokeWidth: 1,
  withLabels: false,
  labelsPosition: "right",
  tooltipDataSource: "all"
};
const varsResolver = createVarsResolver(
  (theme, { strokeColor, labelColor, size }) => ({
    root: {
      "--chart-stroke-color": strokeColor ? getThemeColor(strokeColor, theme) : void 0,
      "--chart-labels-color": labelColor ? getThemeColor(labelColor, theme) : void 0,
      "--chart-size": rem(size)
    }
  })
);
const FunnelChart = factory((_props, ref) => {
  const props = useProps("FunnelChart", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    data,
    withTooltip,
    tooltipAnimationDuration,
    tooltipProps,
    strokeWidth,
    withLabels,
    size,
    valueFormatter,
    children,
    funnelChartProps,
    funnelProps,
    labelsPosition,
    tooltipDataSource,
    ...others
  } = props;
  const theme = useMantineTheme();
  const getStyles = useStyles({
    name: "FunnelChart",
    classes,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver
  });
  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
    classNames,
    styles,
    props
  });
  return /* @__PURE__ */ jsx(Box, { ref, size, ...getStyles("root"), ...others, children: /* @__PURE__ */ jsx(ResponsiveContainer, { children: /* @__PURE__ */ jsxs(FunnelChart$1, { ...funnelChartProps, children: [
    /* @__PURE__ */ jsxs(
      Funnel,
      {
        data,
        dataKey: "value",
        isAnimationActive: false,
        stroke: "var(--chart-stroke-color, var(--mantine-color-body))",
        strokeWidth,
        ...funnelProps,
        children: [
          withLabels && /* @__PURE__ */ jsx(
            LabelList,
            {
              position: labelsPosition,
              fill: labelsPosition === "inside" ? "var(--chart-labels-color, var(--mantine-color-white))" : "var(--chart-labels-color, var(--mantine-color-dimmed))",
              stroke: "none",
              fontFamily: "var(--mantine-font-family)",
              fontSize: 14,
              dataKey: (entry) => {
                return typeof valueFormatter === "function" ? valueFormatter(entry.value) : entry.value;
              }
            }
          ),
          data.map((entry, index) => /* @__PURE__ */ jsx(
            Cell,
            {
              fill: getThemeColor(entry.color, theme),
              stroke: "var(--chart-stroke-color, var(--mantine-color-body))",
              strokeWidth
            },
            index
          ))
        ]
      }
    ),
    withTooltip && /* @__PURE__ */ jsx(
      Tooltip,
      {
        animationDuration: tooltipAnimationDuration,
        isAnimationActive: false,
        content: ({ payload }) => /* @__PURE__ */ jsx(
          ChartTooltip,
          {
            payload: data,
            classNames: resolvedClassNames,
            styles: resolvedStyles,
            type: "radial",
            segmentId: tooltipDataSource === "segment" ? payload?.[0]?.name : void 0,
            valueFormatter
          }
        ),
        ...tooltipProps
      }
    ),
    children
  ] }) }) });
});
FunnelChart.displayName = "@mantine/charts/FunnelChart";
FunnelChart.classes = classes;

export { FunnelChart };
//# sourceMappingURL=FunnelChart.mjs.map
