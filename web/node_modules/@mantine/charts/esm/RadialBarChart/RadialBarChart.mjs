'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import { useState } from 'react';
import { ResponsiveContainer, RadialBarChart as RadialBarChart$1, RadialBar, Legend, Tooltip } from 'recharts';
import { createVarsResolver, getThemeColor, factory, useProps, useStyles, useMantineTheme, useResolvedStylesApi, Box, Paper, Group, ColorSwatch } from '@mantine/core';
import { ChartLegend } from '../ChartLegend/ChartLegend.mjs';
import classes from './RadialBarChart.module.css.mjs';

const defaultProps = {
  barSize: 20,
  startAngle: 90,
  endAngle: -270,
  withBackground: true,
  withTooltip: true
};
const varsResolver = createVarsResolver(
  (theme, { emptyBackgroundColor }) => ({
    root: {
      "--chart-empty-background": emptyBackgroundColor ? getThemeColor(emptyBackgroundColor, theme) : void 0
    }
  })
);
const RadialBarChart = factory((_props, ref) => {
  const props = useProps("RadialBarChart", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    data,
    barSize,
    withBackground,
    dataKey,
    radialBarProps,
    radialBarChartProps,
    withLabels,
    withLegend,
    legendProps,
    withTooltip,
    tooltipProps,
    startAngle,
    endAngle,
    ...others
  } = props;
  const [highlightedArea, setHighlightedArea] = useState(null);
  const getStyles = useStyles({
    name: "RadialBarChart",
    classes,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver
  });
  const theme = useMantineTheme();
  const dataWithResolvedColor = data.map(({ color, ...item }) => {
    const resolvedColor = getThemeColor(color, theme);
    return {
      ...item,
      fill: resolvedColor,
      fillOpacity: highlightedArea ? highlightedArea === item.name ? item.opacity || 1 : 0.05 : item.opacity || 1
    };
  });
  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
    classNames,
    styles,
    props
  });
  return /* @__PURE__ */ jsx(Box, { ref, ...getStyles("root"), ...others, children: /* @__PURE__ */ jsx(ResponsiveContainer, { children: /* @__PURE__ */ jsxs(
    RadialBarChart$1,
    {
      margin: { top: 0, bottom: 0, left: 0, right: 0 },
      innerRadius: "10%",
      outerRadius: "100%",
      cx: "50%",
      cy: "50%",
      barSize,
      startAngle,
      endAngle,
      data: dataWithResolvedColor,
      ...radialBarChartProps,
      children: [
        /* @__PURE__ */ jsx(
          RadialBar,
          {
            label: withLabels ? {
              position: "insideStart",
              fill: "var(--mantine-color-white)",
              fontSize: 12
            } : void 0,
            background: withBackground ? { fill: "var(--chart-empty-background)" } : void 0,
            dataKey,
            isAnimationActive: false,
            ...radialBarProps
          }
        ),
        withLegend && /* @__PURE__ */ jsx(
          Legend,
          {
            verticalAlign: "bottom",
            content: (payload) => /* @__PURE__ */ jsx(
              ChartLegend,
              {
                payload: payload.payload?.map((item) => ({
                  ...item,
                  dataKey: item.payload?.name
                })),
                onHighlight: setHighlightedArea,
                legendPosition: legendProps?.verticalAlign || "bottom",
                classNames: resolvedClassNames,
                styles: resolvedStyles,
                centered: true
              }
            ),
            ...legendProps
          }
        ),
        withTooltip && /* @__PURE__ */ jsx(
          Tooltip,
          {
            animationDuration: 0,
            isAnimationActive: false,
            cursor: { stroke: "var(--chart-cursor-color)" },
            content: ({ payload }) => /* @__PURE__ */ jsxs(Paper, { ...getStyles("tooltip"), children: [
              /* @__PURE__ */ jsxs(Group, { gap: "sm", children: [
                /* @__PURE__ */ jsx(ColorSwatch, { color: payload?.[0]?.payload.fill, size: 12, withShadow: false }),
                /* @__PURE__ */ jsx("span", { children: payload?.[0]?.payload.name })
              ] }),
              /* @__PURE__ */ jsx("span", { children: payload?.[0]?.payload[dataKey] })
            ] }),
            ...tooltipProps
          }
        )
      ]
    }
  ) }) });
});
RadialBarChart.displayName = "@mantine/core/RadialBarChart";
RadialBarChart.classes = classes;

export { RadialBarChart };
//# sourceMappingURL=RadialBarChart.mjs.map
